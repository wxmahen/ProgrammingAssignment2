if(!is.null(m)) {
message("getting cached data")
return(m)
}
m=matrix(1:9, nrow = 3, ncol = 3)
m
if(!is.null(m)) {
message("getting cached data")
return(m)
}
list(set = set, get = get)
m <- x$getMatrixInv()
## A pair of functions to cache the inverse of a matrix
## This creates a matrix object that can cache the inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setMatrix <- function(y) {
x <<- y
m <<- NULL
}
getMatrix <- function() x
setMatrixInv <- function(inv) m <<- inv
getMatrixInv <- function() m
list(setMatrix = setMatrix,
getMatrix = getMatrix,
setMatrixInv = setMatrixInv,
getMatrixInv = getMatrixInv)
}
## This constructs the inverse of the matrix x or retrieves the cache if available
cacheSolve <- function(x, ...) {
m <- x$getMatrixInv()
if(!is.null(m)) {
message("getting cached matrix inverse")
return(m)
}
data <- x$getMatrix()
m <- solve(data, ...)
x$setMatrixInv(m)
m
}
data <- x$getMatrix()
